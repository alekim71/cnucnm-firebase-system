version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: kong:3.4
    container_name: cnucnm-api-gateway
    ports:
      - "8001:8001"  # Admin API
      - "8000:8000"  # Proxy
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    volumes:
      - ./infrastructure/docker/kong/kong.yml:/kong.yml
    command: kong start --conf /kong.yml
    networks:
      - cnucnm-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cnucnm-postgres
    environment:
      POSTGRES_DB: cnucnm
      POSTGRES_USER: cnucnm_user
      POSTGRES_PASSWORD: cnucnm_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cnucnm-network

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: cnucnm-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: cnucnm_admin
      MONGO_INITDB_ROOT_PASSWORD: cnucnm_password
      MONGO_INITDB_DATABASE: cnucnm
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - cnucnm-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cnucnm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cnucnm-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: cnucnm-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: cnucnm_user
      RABBITMQ_DEFAULT_PASS: cnucnm_password
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - cnucnm-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: cnucnm-minio
    environment:
      MINIO_ROOT_USER: cnucnm_admin
      MINIO_ROOT_PASSWORD: cnucnm_password
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - cnucnm-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cnucnm-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cnucnm-network

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: cnucnm-logstash
    volumes:
      - ./infrastructure/docker/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./infrastructure/docker/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
    networks:
      - cnucnm-network
    depends_on:
      - elasticsearch

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cnucnm-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - cnucnm-network
    depends_on:
      - elasticsearch

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cnucnm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cnucnm-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: cnucnm-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: cnucnm_password
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - cnucnm-network
    depends_on:
      - prometheus

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: cnucnm-jaeger
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - cnucnm-network

  # User Service (개발용)
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.dev
    container_name: cnucnm-user-service
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://cnucnm_user:cnucnm_password@postgres:5432/cnucnm
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://cnucnm_user:cnucnm_password@rabbitmq:5672/
    volumes:
      - ./services/user-service:/app
      - /app/__pycache__
    networks:
      - cnucnm-network
    depends_on:
      - postgres
      - redis
      - rabbitmq

  # Animal Service (개발용)
  animal-service:
    build:
      context: ./services/animal-service
      dockerfile: Dockerfile.dev
    container_name: cnucnm-animal-service
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgresql://cnucnm_user:cnucnm_password@postgres:5432/cnucnm
      - REDIS_URL=redis://redis:6379
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_KEY=cnucnm_admin
      - MINIO_SECRET_KEY=cnucnm_password
    volumes:
      - ./services/animal-service:/app
      - /app/__pycache__
    networks:
      - cnucnm-network
    depends_on:
      - postgres
      - redis
      - minio

  # Feed Library Service (개발용)
  feed-library-service:
    build:
      context: ./services/feed-library-service
      dockerfile: Dockerfile.dev
    container_name: cnucnm-feed-library-service
    ports:
      - "8004:8000"
    environment:
      - DATABASE_URL=postgresql://cnucnm_user:cnucnm_password@postgres:5432/cnucnm
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - ./services/feed-library-service:/app
      - /app/__pycache__
    networks:
      - cnucnm-network
    depends_on:
      - postgres
      - redis
      - elasticsearch

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  cnucnm-network:
    driver: bridge
